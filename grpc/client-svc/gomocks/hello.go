// Code generated by MockGen. DO NOT EDIT.
// Source: ./hello/hello.pb.go

// Package mock_hello is a generated GoMock package.
package mock_hello

import (
	hello "client-svc/hello"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockHelloServiceClient is a mock of HelloServiceClient interface
type MockHelloServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceClientMockRecorder
}

// MockHelloServiceClientMockRecorder is the mock recorder for MockHelloServiceClient
type MockHelloServiceClientMockRecorder struct {
	mock *MockHelloServiceClient
}

// NewMockHelloServiceClient creates a new mock instance
func NewMockHelloServiceClient(ctrl *gomock.Controller) *MockHelloServiceClient {
	mock := &MockHelloServiceClient{ctrl: ctrl}
	mock.recorder = &MockHelloServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelloServiceClient) EXPECT() *MockHelloServiceClientMockRecorder {
	return m.recorder
}

// HelloSomeone mocks base method
func (m *MockHelloServiceClient) HelloSomeone(ctx context.Context, in *hello.HelloRequest, opts ...grpc.CallOption) (*hello.HelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HelloSomeone", varargs...)
	ret0, _ := ret[0].(*hello.HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelloSomeone indicates an expected call of HelloSomeone
func (mr *MockHelloServiceClientMockRecorder) HelloSomeone(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloSomeone", reflect.TypeOf((*MockHelloServiceClient)(nil).HelloSomeone), varargs...)
}

// MockHelloServiceServer is a mock of HelloServiceServer interface
type MockHelloServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceServerMockRecorder
}

// MockHelloServiceServerMockRecorder is the mock recorder for MockHelloServiceServer
type MockHelloServiceServerMockRecorder struct {
	mock *MockHelloServiceServer
}

// NewMockHelloServiceServer creates a new mock instance
func NewMockHelloServiceServer(ctrl *gomock.Controller) *MockHelloServiceServer {
	mock := &MockHelloServiceServer{ctrl: ctrl}
	mock.recorder = &MockHelloServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelloServiceServer) EXPECT() *MockHelloServiceServerMockRecorder {
	return m.recorder
}

// HelloSomeone mocks base method
func (m *MockHelloServiceServer) HelloSomeone(arg0 context.Context, arg1 *hello.HelloRequest) (*hello.HelloResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelloSomeone", arg0, arg1)
	ret0, _ := ret[0].(*hello.HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelloSomeone indicates an expected call of HelloSomeone
func (mr *MockHelloServiceServerMockRecorder) HelloSomeone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloSomeone", reflect.TypeOf((*MockHelloServiceServer)(nil).HelloSomeone), arg0, arg1)
}
