// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	hello "client-svc/hello"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HelloServiceServer is an autogenerated mock type for the HelloServiceServer type
type HelloServiceServer struct {
	mock.Mock
}

// HelloSomeone provides a mock function with given fields: _a0, _a1
func (_m *HelloServiceServer) HelloSomeone(_a0 context.Context, _a1 *hello.HelloRequest) (*hello.HelloResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *hello.HelloResponse
	if rf, ok := ret.Get(0).(func(context.Context, *hello.HelloRequest) *hello.HelloResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hello.HelloResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *hello.HelloRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHelloServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewHelloServiceServer creates a new instance of HelloServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHelloServiceServer(t mockConstructorTestingTNewHelloServiceServer) *HelloServiceServer {
	mock := &HelloServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
