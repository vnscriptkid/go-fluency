// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	random "client-svc/random"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RandomServiceServer is an autogenerated mock type for the RandomServiceServer type
type RandomServiceServer struct {
	mock.Mock
}

// Random provides a mock function with given fields: _a0, _a1
func (_m *RandomServiceServer) Random(_a0 context.Context, _a1 *random.RandomRequest) (*random.RandomResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *random.RandomResponse
	if rf, ok := ret.Get(0).(func(context.Context, *random.RandomRequest) *random.RandomResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*random.RandomResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *random.RandomRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRandomServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewRandomServiceServer creates a new instance of RandomServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRandomServiceServer(t mockConstructorTestingTNewRandomServiceServer) *RandomServiceServer {
	mock := &RandomServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
